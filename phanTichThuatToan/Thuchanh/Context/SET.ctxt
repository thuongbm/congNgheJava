#BlueJ class context
comment0.target=SET
comment0.text=\r\n\ \ The\ {@code\ SET}\ class\ represents\ an\ ordered\ set\ of\ comparable\ keys.\r\n\ \ It\ supports\ the\ usual\ <em>add</em>,\ <em>contains</em>,\ and\ <em>delete</em>\r\n\ \ methods.\ It\ also\ provides\ ordered\ methods\ for\ finding\ the\ <em>minimum</em>,\r\n\ \ <em>maximum</em>,\ <em>floor</em>,\ and\ <em>ceiling</em>\ and\ set\ methods\r\n\ \ for\ <em>union</em>,\ <em>intersection</em>,\ and\ <em>equality</em>.\r\n\ \ <p>\r\n\ \ Even\ though\ this\ implementation\ include\ the\ method\ {@code\ equals()},\ it\r\n\ \ does\ not\ support\ the\ method\ {@code\ hashCode()}\ because\ sets\ are\ mutable.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ a\ balanced\ binary\ search\ tree.\ It\ requires\ that\r\n\ \ the\ key\ type\ implements\ the\ {@code\ Comparable}\ interface\ and\ calls\ the\r\n\ \ {@code\ compareTo()}\ and\ method\ to\ compare\ two\ keys.\ It\ does\ not\ call\ either\r\n\ \ {@code\ equals()}\ or\ {@code\ hashCode()}.\r\n\ \ The\ <em>add</em>,\ <em>contains</em>,\ <em>delete</em>,\ <em>minimum</em>,\r\n\ \ <em>maximum</em>,\ <em>ceiling</em>,\ and\ <em>floor</em>\ methods\ take\r\n\ \ logarithmic\ time\ in\ the\ worst\ case.\r\n\ \ The\ <em>size</em>,\ and\ <em>is-empty</em>\ operations\ take\ constant\ time.\r\n\ \ Construction\ takes\ constant\ time.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://algs4.cs.princeton.edu/35applications">Section\ 3.5</a>\ of\r\n\ \ <i>Algorithms\ in\ Java,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n\r\n\ \ @param\ <Key>\ the\ generic\ type\ of\ a\ key\ in\ this\ set\r\n
comment1.params=
comment1.target=SET()
comment1.text=\r\n\ Initializes\ an\ empty\ set.\r\n
comment10.params=
comment10.target=java.lang.Comparable\ min()
comment10.text=\r\n\ Returns\ the\ smallest\ key\ in\ this\ set.\r\n\r\n\ @return\ the\ smallest\ key\ in\ this\ set\r\n\ @throws\ NoSuchElementException\ if\ this\ set\ is\ empty\r\n
comment11.params=key
comment11.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment11.text=\r\n\ Returns\ the\ smallest\ key\ in\ this\ set\ greater\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ smallest\ key\ in\ this\ set\ greater\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n
comment12.params=key
comment12.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment12.text=\r\n\ Returns\ the\ largest\ key\ in\ this\ set\ less\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ largest\ key\ in\ this\ set\ table\ less\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n
comment13.params=that
comment13.target=SET\ union(SET)
comment13.text=\r\n\ Returns\ the\ union\ of\ this\ set\ and\ that\ set.\r\n\r\n\ @param\ \ that\ the\ other\ set\r\n\ @return\ the\ union\ of\ this\ set\ and\ that\ set\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ that}\ is\ {@code\ null}\r\n
comment14.params=that
comment14.target=SET\ intersects(SET)
comment14.text=\r\n\ Returns\ the\ intersection\ of\ this\ set\ and\ that\ set.\r\n\r\n\ @param\ \ that\ the\ other\ set\r\n\ @return\ the\ intersection\ of\ this\ set\ and\ that\ set\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ that}\ is\ {@code\ null}\r\n
comment15.params=other
comment15.target=boolean\ equals(java.lang.Object)
comment15.text=\ \ \ \ \ \ \ \r\n\ Compares\ this\ set\ to\ the\ specified\ set.\r\n\ <p>\r\n\ Note\ that\ this\ method\ declares\ two\ empty\ sets\ to\ be\ equal\r\n\ even\ if\ they\ are\ parameterized\ by\ different\ generic\ types.\r\n\ This\ is\ consistent\ with\ the\ behavior\ of\ {@code\ equals()}\ \r\n\ within\ Java's\ Collections\ framework.\r\n\ \ \ \ \ \ \ \r\n\ @param\ \ other\ the\ other\ set\r\n\ @return\ {@code\ true}\ if\ this\ set\ equals\ {@code\ other};\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment16.params=
comment16.target=int\ hashCode()
comment16.text=\r\n\ This\ operation\ is\ not\ supported\ because\ sets\ are\ mutable.\r\n\r\n\ @return\ does\ not\ return\ a\ value\r\n\ @throws\ UnsupportedOperationException\ if\ called\r\n
comment17.params=
comment17.target=java.lang.String\ toString()
comment17.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ set.\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ set,\ enclosed\ in\ curly\ braces,\r\n\ \ \ \ \ \ \ \ \ with\ adjacent\ keys\ separated\ by\ a\ comma\ and\ a\ space\r\n
comment18.params=args
comment18.target=void\ main(java.lang.String[])
comment18.text=\r\n\ Unit\ tests\ the\ {@code\ SET}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=x
comment2.target=SET(SET)
comment2.text=\r\n\ Initializes\ a\ new\ set\ that\ is\ an\ independent\ copy\ of\ the\ specified\ set.\r\n\r\n\ @param\ x\ the\ set\ to\ copy\r\n
comment3.params=key
comment3.target=void\ add(java.lang.Comparable)
comment3.text=\r\n\ Adds\ the\ key\ to\ this\ set\ (if\ it\ is\ not\ already\ present).\r\n\r\n\ @param\ \ key\ the\ key\ to\ add\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment4.params=key
comment4.target=boolean\ contains(java.lang.Comparable)
comment4.text=\r\n\ Returns\ true\ if\ this\ set\ contains\ the\ given\ key.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ this\ set\ contains\ {@code\ key};\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment5.params=key
comment5.target=void\ delete(java.lang.Comparable)
comment5.text=\r\n\ Removes\ the\ specified\ key\ from\ this\ set\ (if\ the\ set\ contains\ the\ specified\ key).\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment6.params=
comment6.target=int\ size()
comment6.text=\r\n\ Returns\ the\ number\ of\ keys\ in\ this\ set.\r\n\r\n\ @return\ the\ number\ of\ keys\ in\ this\ set\r\n
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\r\n\ Returns\ true\ if\ this\ set\ is\ empty.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ set\ is\ empty;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment8.params=
comment8.target=java.util.Iterator\ iterator()
comment8.text=\r\n\ Returns\ all\ of\ the\ keys\ in\ this\ set,\ as\ an\ iterator.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ a\ set\ named\ {@code\ set},\ use\ the\r\n\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ set)}.\r\n\r\n\ @return\ an\ iterator\ to\ all\ of\ the\ keys\ in\ this\ set\r\n
comment9.params=
comment9.target=java.lang.Comparable\ max()
comment9.text=\r\n\ Returns\ the\ largest\ key\ in\ this\ set.\r\n\r\n\ @return\ the\ largest\ key\ in\ this\ set\r\n\ @throws\ NoSuchElementException\ if\ this\ set\ is\ empty\r\n
numComments=19
