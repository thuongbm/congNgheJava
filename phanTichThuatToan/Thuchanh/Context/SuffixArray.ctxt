#BlueJ class context
comment0.target=SuffixArray
comment0.text=\r\n\ \ The\ {@code\ SuffixArray}\ class\ represents\ a\ suffix\ array\ of\ a\ string\ of\r\n\ \ length\ <em>n</em>.\r\n\ \ It\ supports\ the\ <em>selecting</em>\ the\ <em>i</em>th\ smallest\ suffix,\r\n\ \ getting\ the\ <em>index</em>\ of\ the\ <em>i</em>th\ smallest\ suffix,\r\n\ \ computing\ the\ length\ of\ the\ <em>longest\ common\ prefix</em>\ between\ the\r\n\ \ <em>i</em>th\ smallest\ suffix\ and\ the\ <em>i</em>-1st\ smallest\ suffix,\r\n\ \ and\ determining\ the\ <em>rank</em>\ of\ a\ query\ string\ (which\ is\ the\ number\r\n\ \ of\ suffixes\ strictly\ less\ than\ the\ query\ string).\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ a\ nested\ class\ {@code\ Suffix}\ to\ represent\r\n\ \ a\ suffix\ of\ a\ string\ (using\ constant\ time\ and\ space)\ and\r\n\ \ {@code\ Arrays.sort()}\ to\ sort\ the\ array\ of\ suffixes.\r\n\ \ The\ <em>index</em>\ and\ <em>length</em>\ operations\ takes\ constant\ time\ \r\n\ \ in\ the\ worst\ case.\ The\ <em>lcp</em>\ operation\ takes\ time\ proportional\ to\ the\r\n\ \ length\ of\ the\ longest\ common\ prefix.\r\n\ \ The\ <em>select</em>\ operation\ takes\ time\ proportional\r\n\ \ to\ the\ length\ of\ the\ suffix\ and\ should\ be\ used\ primarily\ for\ debugging.\r\n\ \ <p>\r\n\ \ For\ alternate\ implementations\ of\ the\ same\ API,\ see\r\n\ \ {@link\ SuffixArrayX},\ which\ is\ faster\ in\ practice\ (uses\ 3-way\ radix\ quicksort)\r\n\ \ and\ uses\ less\ memory\ (does\ not\ create\ {@code\ Suffix}\ objects)\r\n\ \ and\ <a\ href\ \=\ "https\://algs4.cs.princeton.edu/63suffix/SuffixArrayJava6.java.html">SuffixArrayJava6.java</a>,\r\n\ \ which\ relies\ on\ the\ constant-time\ substring\ extraction\ method\ that\ existed\r\n\ \ in\ Java\ 6.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/63suffix">Section\ 6.3</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n
comment1.params=text
comment1.target=SuffixArray(java.lang.String)
comment1.text=\r\n\ Initializes\ a\ suffix\ array\ for\ the\ given\ {@code\ text}\ string.\r\n\ @param\ text\ the\ input\ string\r\n
comment2.params=
comment2.target=int\ length()
comment2.text=\r\n\ Returns\ the\ length\ of\ the\ input\ string.\r\n\ @return\ the\ length\ of\ the\ input\ string\r\n
comment3.params=i
comment3.target=int\ index(int)
comment3.text=\r\n\ Returns\ the\ index\ into\ the\ original\ string\ of\ the\ <em>i</em>th\ smallest\ suffix.\r\n\ That\ is,\ {@code\ text.substring(sa.index(i))}\ is\ the\ <em>i</em>th\ smallest\ suffix.\r\n\ @param\ i\ an\ integer\ between\ 0\ and\ <em>n</em>-1\r\n\ @return\ the\ index\ into\ the\ original\ string\ of\ the\ <em>i</em>th\ smallest\ suffix\r\n\ @throws\ java.lang.IllegalArgumentException\ unless\ {@code\ 0\ <\=\ i\ <\ n}\r\n
comment4.params=i
comment4.target=int\ lcp(int)
comment4.text=\r\n\ Returns\ the\ length\ of\ the\ longest\ common\ prefix\ of\ the\ <em>i</em>th\r\n\ smallest\ suffix\ and\ the\ <em>i</em>-1st\ smallest\ suffix.\r\n\ @param\ i\ an\ integer\ between\ 1\ and\ <em>n</em>-1\r\n\ @return\ the\ length\ of\ the\ longest\ common\ prefix\ of\ the\ <em>i</em>th\r\n\ smallest\ suffix\ and\ the\ <em>i</em>-1st\ smallest\ suffix.\r\n\ @throws\ java.lang.IllegalArgumentException\ unless\ {@code\ 1\ <\=\ i\ <\ n}\r\n
comment5.params=s\ t
comment5.target=int\ lcpSuffix(SuffixArray.Suffix,\ SuffixArray.Suffix)
comment6.params=i
comment6.target=java.lang.String\ select(int)
comment6.text=\r\n\ Returns\ the\ <em>i</em>th\ smallest\ suffix\ as\ a\ string.\r\n\ @param\ i\ the\ index\r\n\ @return\ the\ <em>i</em>\ smallest\ suffix\ as\ a\ string\r\n\ @throws\ java.lang.IllegalArgumentException\ unless\ {@code\ 0\ <\=\ i\ <\ n}\r\n
comment7.params=query
comment7.target=int\ rank(java.lang.String)
comment7.text=\r\n\ Returns\ the\ number\ of\ suffixes\ strictly\ less\ than\ the\ {@code\ query}\ string.\r\n\ We\ note\ that\ {@code\ rank(select(i))}\ equals\ {@code\ i}\ for\ each\ {@code\ i}\r\n\ between\ 0\ and\ <em>n</em>-1.\r\n\ @param\ query\ the\ query\ string\r\n\ @return\ the\ number\ of\ suffixes\ strictly\ less\ than\ {@code\ query}\r\n
comment8.params=query\ suffix
comment8.target=int\ compare(java.lang.String,\ SuffixArray.Suffix)
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\r\n\ Unit\ tests\ the\ {@code\ SuffixArray}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=10
