#BlueJ class context
comment0.target=BipartiteMatching
comment0.text=\r\n\ \ The\ {@code\ BipartiteMatching}\ class\ represents\ a\ data\ type\ for\ computing\ a\r\n\ \ <em>maximum\ (cardinality)\ matching</em>\ and\ a\r\n\ \ <em>minimum\ (cardinality)\ vertex\ cover</em>\ in\ a\ bipartite\ graph.\r\n\ \ A\ <em>bipartite\ graph</em>\ in\ a\ graph\ whose\ vertices\ can\ be\ partitioned\r\n\ \ into\ two\ disjoint\ sets\ such\ that\ every\ edge\ has\ one\ endpoint\ in\ either\ set.\r\n\ \ A\ <em>matching</em>\ in\ a\ graph\ is\ a\ subset\ of\ its\ edges\ with\ no\ common\r\n\ \ vertices.\ A\ <em>maximum\ matching</em>\ is\ a\ matching\ with\ the\ maximum\ number\r\n\ \ of\ edges.\r\n\ \ A\ <em>perfect\ matching</em>\ is\ a\ matching\ which\ matches\ all\ vertices\ in\ the\ graph.\r\n\ \ A\ <em>vertex\ cover</em>\ in\ a\ graph\ is\ a\ subset\ of\ its\ vertices\ such\ that\r\n\ \ every\ edge\ is\ incident\ to\ at\ least\ one\ vertex.\ A\ <em>minimum\ vertex\ cover</em>\r\n\ \ is\ a\ vertex\ cover\ with\ the\ minimum\ number\ of\ vertices.\r\n\ \ By\ Konig's\ theorem,\ in\ any\ biparite\r\n\ \ graph,\ the\ maximum\ number\ of\ edges\ in\ matching\ equals\ the\ minimum\ number\r\n\ \ of\ vertices\ in\ a\ vertex\ cover.\r\n\ \ The\ maximum\ matching\ problem\ in\ <em>nonbipartite</em>\ graphs\ is\r\n\ \ also\ important,\ but\ all\ known\ algorithms\ for\ this\ more\ general\ problem\r\n\ \ are\ substantially\ more\ complicated.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ the\ <em>alternating\ path\ algorithm</em>.\r\n\ \ It\ is\ equivalent\ to\ reducing\ to\ the\ maximum\ flow\ problem\ and\ running\r\n\ \ the\ augmenting\ path\ algorithm\ on\ the\ resulting\ flow\ network,\ but\ it\r\n\ \ does\ so\ with\ less\ overhead.\r\n\ \ The\ order\ of\ growth\ of\ the\ running\ time\ in\ the\ worst\ case\ is\r\n\ \ (<em>E</em>\ +\ <em>V</em>)\ <em>V</em>,\r\n\ \ where\ <em>E</em>\ is\ the\ number\ of\ edges\ and\ <em>V</em>\ is\ the\ number\r\n\ \ of\ vertices\ in\ the\ graph.\ It\ uses\ extra\ space\ (not\ including\ the\ graph)\r\n\ \ proportional\ to\ <em>V</em>.\r\n\ \ <p>\r\n\ \ See\ also\ {@link\ HopcroftKarp},\ which\ solves\ the\ problem\ in\ \ O(<em>E</em>\ sqrt(<em>V</em>))\r\n\ \ using\ the\ Hopcroft-Karp\ algorithm\ and\r\n\ \ <a\ href\ \=\ "https\://algs4.cs.princeton.edu/65reductions/BipartiteMatchingToMaxflow.java.html">BipartiteMatchingToMaxflow</a>,\r\n\ \ which\ solves\ the\ problem\ in\ O(<em>E\ V</em>)\ time\ via\ a\ reduction\ to\ maxflow.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://algs4.cs.princeton.edu/65reductions">Section\ 6.5</a>\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=v\ w
comment1.target=boolean\ isResidualGraphEdge(int,\ int)
comment2.params=v
comment2.target=int\ mate(int)
comment2.text=\r\n\ Returns\ the\ vertex\ to\ which\ the\ specified\ vertex\ is\ matched\ in\r\n\ the\ maximum\ matching\ computed\ by\ the\ algorithm.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ vertex\ to\ which\ vertex\ {@code\ v}\ is\ matched\ in\ the\r\n\ \ \ \ \ \ \ \ \ maximum\ matching;\ {@code\ -1}\ if\ the\ vertex\ is\ not\ matched\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n\r\n
comment3.params=v
comment3.target=boolean\ isMatched(int)
comment3.text=\r\n\ Returns\ true\ if\ the\ specified\ vertex\ is\ matched\ in\ the\ maximum\ matching\r\n\ computed\ by\ the\ algorithm.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ {@code\ true}\ if\ vertex\ {@code\ v}\ is\ matched\ in\ maximum\ matching;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n\r\n
comment4.params=
comment4.target=int\ size()
comment4.text=\r\n\ Returns\ the\ number\ of\ edges\ in\ a\ maximum\ matching.\r\n\r\n\ @return\ the\ number\ of\ edges\ in\ a\ maximum\ matching\r\n
comment5.params=
comment5.target=boolean\ isPerfect()
comment5.text=\r\n\ Returns\ true\ if\ the\ graph\ contains\ a\ perfect\ matching.\r\n\ That\ is,\ the\ number\ of\ edges\ in\ a\ maximum\ matching\ is\ equal\ to\ one\ half\r\n\ of\ the\ number\ of\ vertices\ in\ the\ graph\ (so\ that\ every\ vertex\ is\ matched).\r\n\r\n\ @return\ {@code\ true}\ if\ the\ graph\ contains\ a\ perfect\ matching;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment6.params=v
comment6.target=boolean\ inMinVertexCover(int)
comment6.text=\r\n\ Returns\ true\ if\ the\ specified\ vertex\ is\ in\ the\ minimum\ vertex\ cover\r\n\ computed\ by\ the\ algorithm.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ {@code\ true}\ if\ vertex\ {@code\ v}\ is\ in\ the\ minimum\ vertex\ cover;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment7.params=v
comment7.target=void\ validate(int)
comment8.params=args
comment8.target=void\ main(java.lang.String[])
comment8.text=\r\n\ Unit\ tests\ the\ {@code\ HopcroftKarp}\ data\ type.\r\n\ Takes\ three\ command-line\ arguments\ {@code\ V1},\ {@code\ V2},\ and\ {@code\ E};\r\n\ creates\ a\ random\ bipartite\ graph\ with\ {@code\ V1}\ +\ {@code\ V2}\ vertices\r\n\ and\ {@code\ E}\ edges;\ computes\ a\ maximum\ matching\ and\ minimum\ vertex\ cover;\r\n\ and\ prints\ the\ results.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=9
