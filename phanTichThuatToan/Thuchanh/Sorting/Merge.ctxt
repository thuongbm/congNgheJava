#BlueJ class context
comment0.target=Merge
comment0.text=\r\n\ \ The\ {@code\ Merge}\ class\ provides\ static\ methods\ for\ sorting\ an\r\n\ \ array\ using\ mergesort.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/22mergesort">Section\ 2.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\ \ For\ an\ optimized\ version,\ see\ {@link\ MergeX}.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=Merge()
comment10.params=a\ index\ aux\ lo\ hi
comment10.target=void\ sort(java.lang.Comparable[],\ int[],\ int[],\ int,\ int)
comment11.params=a
comment11.target=void\ show(java.lang.Comparable[])
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment12.text=\r\n\ Reads\ in\ a\ sequence\ of\ strings\ from\ standard\ input;\ mergesorts\ them;\ \r\n\ and\ prints\ them\ to\ standard\ output\ in\ ascending\ order.\ \r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=a\ aux\ lo\ mid\ hi
comment2.target=void\ merge(java.lang.Comparable[],\ java.lang.Comparable[],\ int,\ int,\ int)
comment3.params=a\ aux\ lo\ hi
comment3.target=void\ sort(java.lang.Comparable[],\ java.lang.Comparable[],\ int,\ int)
comment4.params=a
comment4.target=void\ sort(java.lang.Comparable[])
comment4.text=\r\n\ Rearranges\ the\ array\ in\ ascending\ order,\ using\ the\ natural\ order.\r\n\ @param\ a\ the\ array\ to\ be\ sorted\r\n
comment5.params=v\ w
comment5.target=boolean\ less(java.lang.Comparable,\ java.lang.Comparable)
comment5.text=\r\n\ \ Helper\ sorting\ function.\r\n
comment6.params=a
comment6.target=boolean\ isSorted(java.lang.Comparable[])
comment6.text=\r\n\ \ Check\ if\ array\ is\ sorted\ -\ useful\ for\ debugging.\r\n
comment7.params=a\ lo\ hi
comment7.target=boolean\ isSorted(java.lang.Comparable[],\ int,\ int)
comment8.params=a\ index\ aux\ lo\ mid\ hi
comment8.target=void\ merge(java.lang.Comparable[],\ int[],\ int[],\ int,\ int,\ int)
comment8.text=\r\n\ \ Index\ mergesort.\r\n
comment9.params=a
comment9.target=int[]\ indexSort(java.lang.Comparable[])
comment9.text=\r\n\ Returns\ a\ permutation\ that\ gives\ the\ elements\ in\ the\ array\ in\ ascending\ order.\r\n\ @param\ a\ the\ array\r\n\ @return\ a\ permutation\ {@code\ p[]}\ such\ that\ {@code\ a[p[0]]},\ {@code\ a[p[1]]},\r\n\ \ \ \ ...,\ {@code\ a[p[N-1]]}\ are\ in\ ascending\ order\r\n
numComments=13
