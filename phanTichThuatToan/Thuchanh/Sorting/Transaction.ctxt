#BlueJ class context
comment0.target=Transaction
comment0.text=\r\n\ \ The\ {@code\ Transaction}\ class\ is\ an\ immutable\ data\ type\ to\ encapsulate\ a\r\n\ \ commercial\ transaction\ with\ a\ customer\ name,\ date,\ and\ amount.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ \r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/12oop">Section\ 1.2</a>\ of\ \r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\ \r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=who
comment1.target=Transaction(java.lang.String)
comment1.text=\r\n\ Initializes\ a\ new\ transaction\ from\ the\ given\ arguments.\r\n\r\n\ @param\ \ who\ the\ person\ involved\ in\ this\ transaction\r\n\ @param\ \ when\ the\ date\ of\ this\ transaction\r\n\ @param\ \ amount\ the\ amount\ of\ this\ transaction\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ amount}\ \r\n\ \ \ \ \ \ \ \ \ is\ {@code\ Double.NaN},\ {@code\ Double.POSITIVE_INFINITY},\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ Double.NEGATIVE_INFINITY}\r\n
comment2.params=transaction
comment2.target=Transaction(java.lang.String)
comment2.text=\r\n\ Initializes\ a\ new\ transaction\ by\ parsing\ a\ string\ of\ the\ form\ NAME\ DATE\ AMOUNT.\r\n\r\n\ @param\ \ transaction\ the\ string\ to\ parse\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ amount}\ \r\n\ \ \ \ \ \ \ \ \ is\ {@code\ Double.NaN},\ {@code\ Double.POSITIVE_INFINITY},\r\n\ \ \ \ \ \ \ \ \ or\ {@code\ Double.NEGATIVE_INFINITY}\r\n
comment3.params=
comment3.target=java.lang.String\ who()
comment3.text=\r\n\ Returns\ the\ name\ of\ the\ customer\ involved\ in\ this\ transaction.\r\n\r\n\ @return\ the\ name\ of\ the\ customer\ involved\ in\ this\ transaction\r\n
comment4.params=
comment4.target=double\ amount()
comment4.text=\r\n\ Returns\ the\ amount\ of\ this\ transaction.\r\n\r\n\ @return\ the\ amount\ of\ this\ transaction\r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ transaction.\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ transaction\r\n
comment6.params=that
comment6.target=int\ compareTo(Transaction)
comment6.text=\r\n\ Compares\ two\ transactions\ by\ amount.\r\n\r\n\ @param\ \ that\ the\ other\ transaction\r\n\ @return\ {\ a\ negative\ integer,\ zero,\ a\ positive\ integer},\ depending\r\n\ \ \ \ \ \ \ \ \ on\ whether\ the\ amount\ of\ this\ transaction\ is\ {\ less\ than,\r\n\ \ \ \ \ \ \ \ \ equal\ to,\ or\ greater\ than\ }\ the\ amount\ of\ that\ transaction\r\n
comment7.params=other
comment7.target=boolean\ equals(java.lang.Object)
comment7.text=\r\n\ Compares\ this\ transaction\ to\ the\ specified\ object.\r\n\r\n\ @param\ \ other\ the\ other\ transaction\r\n\ @return\ true\ if\ this\ transaction\ is\ equal\ to\ {@code\ other};\ false\ otherwise\r\n
comment8.params=
comment8.target=int\ hashCode()
comment8.text=\r\n\ Returns\ a\ hash\ code\ for\ this\ transaction.\r\n\r\n\ @return\ a\ hash\ code\ for\ this\ transaction\r\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\r\n\ Unit\ tests\ the\ {@code\ Transaction}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=10
