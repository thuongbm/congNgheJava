#BlueJ class context
comment0.target=PrimMST
comment0.text=\r\n\ \ The\ {@code\ PrimMST}\ class\ represents\ a\ data\ type\ for\ computing\ a\r\n\ \ <em>minimum\ spanning\ tree</em>\ in\ an\ edge-weighted\ graph.\r\n\ \ The\ edge\ weights\ can\ be\ positive,\ zero,\ or\ negative\ and\ need\ not\r\n\ \ be\ distinct.\ If\ the\ graph\ is\ not\ connected,\ it\ computes\ a\ <em>minimum\r\n\ \ spanning\ forest</em>,\ which\ is\ the\ union\ of\ minimum\ spanning\ trees\r\n\ \ in\ each\ connected\ component.\ The\ {@code\ weight()}\ method\ returns\ the\r\n\ \ weight\ of\ a\ minimum\ spanning\ tree\ and\ the\ {@code\ edges()}\ method\r\n\ \ returns\ its\ edges.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ <em>Prim's\ algorithm</em>\ with\ an\ indexed\r\n\ \ binary\ heap.\r\n\ \ The\ constructor\ takes\ &Theta;(<em>E</em>\ log\ <em>V</em>)\ time\ in\r\n\ \ the\ worst\ case,\ where\ <em>V</em>\ is\ the\ number\ of\r\n\ \ vertices\ and\ <em>E</em>\ is\ the\ number\ of\ edges.\r\n\ \ Each\ instance\ method\ takes\ &Theta;(1)\ time.\r\n\ \ It\ uses\ &Theta;(<em>V</em>)\ extra\ space\ (not\ including\ the\r\n\ \ edge-weighted\ graph).\r\n\ \ <p>\r\n\ \ This\ {@code\ weight()}\ method\ correctly\ computes\ the\ weight\ of\ the\ MST\r\n\ \ if\ all\ arithmetic\ performed\ is\ without\ floating-point\ rounding\ error\r\n\ \ or\ arithmetic\ overflow.\r\n\ \ This\ is\ the\ case\ if\ all\ edge\ weights\ are\ non-negative\ integers\r\n\ \ and\ the\ weight\ of\ the\ MST\ does\ not\ exceed\ 2<sup>52</sup>.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/43mst">Section\ 4.3</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\ \ For\ alternate\ implementations,\ see\ {@link\ LazyPrimMST},\ {@link\ KruskalMST},\r\n\ \ and\ {@link\ BoruvkaMST}.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=G
comment1.target=PrimMST(EdgeWeightedGraph)
comment1.text=\r\n\ Compute\ a\ minimum\ spanning\ tree\ (or\ forest)\ of\ an\ edge-weighted\ graph.\r\n\ @param\ G\ the\ edge-weighted\ graph\r\n
comment2.params=G\ s
comment2.target=void\ prim(EdgeWeightedGraph,\ int)
comment3.params=G\ v
comment3.target=void\ scan(EdgeWeightedGraph,\ int)
comment4.params=
comment4.target=java.lang.Iterable\ edges()
comment4.text=\r\n\ Returns\ the\ edges\ in\ a\ minimum\ spanning\ tree\ (or\ forest).\r\n\ @return\ the\ edges\ in\ a\ minimum\ spanning\ tree\ (or\ forest)\ as\r\n\ \ \ \ an\ iterable\ of\ edges\r\n
comment5.params=
comment5.target=double\ weight()
comment5.text=\r\n\ Returns\ the\ sum\ of\ the\ edge\ weights\ in\ a\ minimum\ spanning\ tree\ (or\ forest).\r\n\ @return\ the\ sum\ of\ the\ edge\ weights\ in\ a\ minimum\ spanning\ tree\ (or\ forest)\r\n
comment6.params=G
comment6.target=boolean\ check(EdgeWeightedGraph)
comment7.params=args
comment7.target=void\ main(java.lang.String[])
comment7.text=\r\n\ Unit\ tests\ the\ {@code\ PrimMST}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=8
