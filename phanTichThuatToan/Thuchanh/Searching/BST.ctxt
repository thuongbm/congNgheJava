#BlueJ class context
comment0.target=BST
comment0.text=\r\n\ \ The\ {@code\ BST}\ class\ represents\ an\ ordered\ symbol\ table\ of\ generic\r\n\ \ key-value\ pairs.\r\n\ \ It\ supports\ the\ usual\ <em>put</em>,\ <em>get</em>,\ <em>contains</em>,\r\n\ \ <em>delete</em>,\ <em>size</em>,\ and\ <em>is-empty</em>\ methods.\r\n\ \ It\ also\ provides\ ordered\ methods\ for\ finding\ the\ <em>minimum</em>,\r\n\ \ <em>maximum</em>,\ <em>floor</em>,\ <em>select</em>,\ <em>ceiling</em>.\r\n\ \ It\ also\ provides\ a\ <em>keys</em>\ method\ for\ iterating\ over\ all\ of\ the\ keys.\r\n\ \ A\ symbol\ table\ implements\ the\ <em>associative\ array</em>\ abstraction\:\r\n\ \ when\ associating\ a\ value\ with\ a\ key\ that\ is\ already\ in\ the\ symbol\ table,\r\n\ \ the\ convention\ is\ to\ replace\ the\ old\ value\ with\ the\ new\ value.\r\n\ \ Unlike\ {@link\ java.util.Map},\ this\ class\ uses\ the\ convention\ that\r\n\ \ values\ cannot\ be\ {@code\ null}\u2014setting\ the\r\n\ \ value\ associated\ with\ a\ key\ to\ {@code\ null}\ is\ equivalent\ to\ deleting\ the\ key\r\n\ \ from\ the\ symbol\ table.\r\n\ \ <p>\r\n\ \ It\ requires\ that\r\n\ \ the\ key\ type\ implements\ the\ {@code\ Comparable}\ interface\ and\ calls\ the\r\n\ \ {@code\ compareTo()}\ and\ method\ to\ compare\ two\ keys.\ It\ does\ not\ call\ either\r\n\ \ {@code\ equals()}\ or\ {@code\ hashCode()}.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ an\ (unbalanced)\ <em>binary\ search\ tree</em>.\r\n\ \ The\ <em>put</em>,\ <em>contains</em>,\ <em>remove</em>,\ <em>minimum</em>,\r\n\ \ <em>maximum</em>,\ <em>ceiling</em>,\ <em>floor</em>,\ <em>select</em>,\ and\r\n\ \ <em>rank</em>\ \ operations\ each\ take\ &Theta;(<em>n</em>)\ time\ in\ the\ worst\r\n\ \ case,\ where\ <em>n</em>\ is\ the\ number\ of\ key-value\ pairs.\r\n\ \ The\ <em>size</em>\ and\ <em>is-empty</em>\ operations\ take\ &Theta;(1)\ time.\r\n\ \ The\ keys\ method\ takes\ &Theta;(<em>n</em>)\ time\ in\ the\ worst\ case.\r\n\ \ Construction\ takes\ &Theta;(1)\ time.\r\n\ \ <p>\r\n\ \ For\ alternative\ implementations\ of\ the\ symbol\ table\ API,\ see\ {@link\ ST},\r\n\ \ {@link\ BinarySearchST},\ {@link\ SequentialSearchST},\ {@link\ RedBlackBST},\r\n\ \ {@link\ SeparateChainingHashST},\ and\ {@link\ LinearProbingHashST},\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://algs4.cs.princeton.edu/32bst">Section\ 3.2</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=BST()
comment1.text=\r\n\ Initializes\ an\ empty\ symbol\ table.\r\n
comment10.params=
comment10.target=void\ deleteMin()
comment10.text=\r\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment11.params=x
comment11.target=BST.Node\ deleteMin(BST.Node)
comment12.params=
comment12.target=void\ deleteMax()
comment12.text=\r\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ the\ symbol\ table.\r\n\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment13.params=x
comment13.target=BST.Node\ deleteMax(BST.Node)
comment14.params=key
comment14.target=void\ delete(java.lang.Comparable)
comment14.text=\r\n\ Removes\ the\ specified\ key\ and\ its\ associated\ value\ from\ this\ symbol\ table\r\n\ (if\ the\ key\ is\ in\ this\ symbol\ table).\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment15.params=x\ key
comment15.target=BST.Node\ delete(BST.Node,\ java.lang.Comparable)
comment16.params=
comment16.target=java.lang.Comparable\ min()
comment16.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table.\r\n\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment17.params=x
comment17.target=BST.Node\ min(BST.Node)
comment18.params=
comment18.target=java.lang.Comparable\ max()
comment18.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table.\r\n\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment19.params=x
comment19.target=BST.Node\ max(BST.Node)
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\r\n\ Returns\ true\ if\ this\ symbol\ table\ is\ empty.\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty;\ {@code\ false}\ otherwise\r\n
comment20.params=key
comment20.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment20.text=\r\n\ Returns\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ largest\ key\ in\ the\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment21.params=x\ key
comment21.target=BST.Node\ floor(BST.Node,\ java.lang.Comparable)
comment22.params=key
comment22.target=java.lang.Comparable\ floor2(java.lang.Comparable)
comment23.params=x\ key\ best
comment23.target=java.lang.Comparable\ floor2(BST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment24.params=key
comment24.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment24.text=\r\n\ Returns\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ smallest\ key\ in\ the\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment25.params=x\ key
comment25.target=BST.Node\ ceiling(BST.Node,\ java.lang.Comparable)
comment26.params=rank
comment26.target=java.lang.Comparable\ select(int)
comment26.text=\r\n\ Return\ the\ key\ in\ the\ symbol\ table\ of\ a\ given\ {@code\ rank}.\r\n\ This\ key\ has\ the\ property\ that\ there\ are\ {@code\ rank}\ keys\ in\r\n\ the\ symbol\ table\ that\ are\ smaller.\ In\ other\ words,\ this\ key\ is\ the\r\n\ ({@code\ rank}+1)st\ smallest\ key\ in\ the\ symbol\ table.\r\n\r\n\ @param\ \ rank\ the\ order\ statistic\r\n\ @return\ the\ key\ in\ the\ symbol\ table\ of\ given\ {@code\ rank}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ rank}\ is\ between\ 0\ and\r\n\ \ \ \ \ \ \ \ <em>n</em>\u20131\r\n
comment27.params=x\ rank
comment27.target=java.lang.Comparable\ select(BST.Node,\ int)
comment28.params=key
comment28.target=int\ rank(java.lang.Comparable)
comment28.text=\r\n\ Return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment29.params=key\ x
comment29.target=int\ rank(java.lang.Comparable,\ BST.Node)
comment3.params=
comment3.target=int\ size()
comment3.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment30.params=
comment30.target=java.lang.Iterable\ keys()
comment30.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ ascending\ order,\r\n\ as\ an\ {@code\ Iterable}.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\r\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\r\n\r\n\ @return\ all\ keys\ in\ the\ symbol\ table\ in\ ascending\ order\r\n
comment31.params=lo\ hi
comment31.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment31.text=\r\n\ Returns\ all\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range\r\n\ in\ ascending\ order,\ as\ an\ {@code\ Iterable}.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ all\ keys\ in\ the\ symbol\ table\ between\ {@code\ lo}\r\n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\ in\ ascending\ order\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\r\n
comment32.params=x\ queue\ lo\ hi
comment32.target=void\ keys(BST.Node,\ Queue,\ java.lang.Comparable,\ java.lang.Comparable)
comment33.params=lo\ hi
comment33.target=int\ size(java.lang.Comparable,\ java.lang.Comparable)
comment33.text=\r\n\ Returns\ the\ number\ of\ keys\ in\ the\ symbol\ table\ in\ the\ given\ range.\r\n\r\n\ @param\ \ lo\ minimum\ endpoint\r\n\ @param\ \ hi\ maximum\ endpoint\r\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ between\ {@code\ lo}\r\n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\r\n
comment34.params=
comment34.target=int\ height()
comment34.text=\r\n\ Returns\ the\ height\ of\ the\ BST\ (for\ debugging).\r\n\r\n\ @return\ the\ height\ of\ the\ BST\ (a\ 1-node\ tree\ has\ height\ 0)\r\n
comment35.params=x
comment35.target=int\ height(BST.Node)
comment36.params=
comment36.target=java.lang.Iterable\ levelOrder()
comment36.text=\r\n\ Returns\ the\ keys\ in\ the\ BST\ in\ level\ order\ (for\ debugging).\r\n\r\n\ @return\ the\ keys\ in\ the\ BST\ in\ level\ order\ traversal\r\n
comment37.params=
comment37.target=boolean\ check()
comment37.text=\r\n\ \ Check\ integrity\ of\ BST\ data\ structure.\r\n
comment38.params=
comment38.target=boolean\ isBST()
comment39.params=x\ min\ max
comment39.target=boolean\ isBST(BST.Node,\ java.lang.Comparable,\ java.lang.Comparable)
comment4.params=x
comment4.target=int\ size(BST.Node)
comment40.params=
comment40.target=boolean\ isSizeConsistent()
comment41.params=x
comment41.target=boolean\ isSizeConsistent(BST.Node)
comment42.params=
comment42.target=boolean\ isRankConsistent()
comment43.params=args
comment43.target=void\ main(java.lang.String[])
comment43.text=\r\n\ Unit\ tests\ the\ {@code\ BST}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment5.params=key
comment5.target=boolean\ contains(java.lang.Comparable)
comment5.text=\r\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment6.params=key
comment6.target=java.lang.Object\ get(java.lang.Comparable)
comment6.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment7.params=x\ key
comment7.target=java.lang.Object\ get(BST.Node,\ java.lang.Comparable)
comment8.params=key\ val
comment8.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment8.text=\r\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\r\n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\r\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\r\n\ if\ the\ specified\ value\ is\ {@code\ null}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @param\ \ val\ the\ value\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment9.params=x\ key\ val
comment9.target=BST.Node\ put(BST.Node,\ java.lang.Comparable,\ java.lang.Object)
numComments=44
