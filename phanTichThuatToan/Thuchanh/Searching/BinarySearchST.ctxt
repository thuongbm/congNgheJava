#BlueJ class context
comment0.target=BinarySearchST
comment0.text=\r\n\ \ The\ {@code\ BST}\ class\ represents\ an\ ordered\ symbol\ table\ of\ generic\r\n\ \ key-value\ pairs.\r\n\ \ It\ supports\ the\ usual\ <em>put</em>,\ <em>get</em>,\ <em>contains</em>,\r\n\ \ <em>delete</em>,\ <em>size</em>,\ and\ <em>is-empty</em>\ methods.\r\n\ \ It\ also\ provides\ ordered\ methods\ for\ finding\ the\ <em>minimum</em>,\r\n\ \ <em>maximum</em>,\ <em>floor</em>,\ <em>select</em>,\ and\ <em>ceiling</em>.\r\n\ \ It\ also\ provides\ a\ <em>keys</em>\ method\ for\ iterating\ over\ all\ of\ the\ keys.\r\n\ \ A\ symbol\ table\ implements\ the\ <em>associative\ array</em>\ abstraction\:\r\n\ \ when\ associating\ a\ value\ with\ a\ key\ that\ is\ already\ in\ the\ symbol\ table,\r\n\ \ the\ convention\ is\ to\ replace\ the\ old\ value\ with\ the\ new\ value.\r\n\ \ Unlike\ {@link\ java.util.Map},\ this\ class\ uses\ the\ convention\ that\r\n\ \ values\ cannot\ be\ {@code\ null}\uFFFDsetting\ the\r\n\ \ value\ associated\ with\ a\ key\ to\ {@code\ null}\ is\ equivalent\ to\ deleting\ the\ key\r\n\ \ from\ the\ symbol\ table.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ a\ sorted\ array.\ It\ requires\ that\r\n\ \ the\ key\ type\ implements\ the\ {@code\ Comparable}\ interface\ and\ calls\ the\r\n\ \ {@code\ compareTo()}\ and\ method\ to\ compare\ two\ keys.\ It\ does\ not\ call\ either\r\n\ \ {@code\ equals()}\ or\ {@code\ hashCode()}.\r\n\ \ The\ <em>put</em>\ and\ <em>remove</em>\ operations\ each\ take\ linear\ time\ in\r\n\ \ the\ worst\ case;\ the\ <em>contains</em>,\ <em>ceiling</em>,\ <em>floor</em>,\r\n\ \ and\ <em>rank</em>\ operations\ take\ logarithmic\ time;\ the\ <em>size</em>,\r\n\ \ <em>is-empty</em>,\ <em>minimum</em>,\ <em>maximum</em>,\ and\ <em>select</em>\r\n\ \ operations\ take\ constant\ time.\ Construction\ takes\ constant\ time.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/31elementary">Section\ 3.1</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\ \ For\ other\ implementations,\ see\ {@link\ ST},\ {@link\ BST},\r\n\ \ {@link\ SequentialSearchST},\ {@link\ RedBlackBST},\r\n\ \ {@link\ SeparateChainingHashST},\ and\ {@link\ LinearProbingHashST},\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n
comment1.params=
comment1.target=BinarySearchST()
comment1.text=\r\n\ Initializes\ an\ empty\ symbol\ table.\r\n
comment10.params=key
comment10.target=void\ delete(java.lang.Comparable)
comment10.text=\r\n\ Removes\ the\ specified\ key\ and\ associated\ value\ from\ this\ symbol\ table\r\n\ (if\ the\ key\ is\ in\ the\ symbol\ table).\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment11.params=
comment11.target=void\ deleteMin()
comment11.text=\r\n\ Removes\ the\ smallest\ key\ and\ associated\ value\ from\ this\ symbol\ table.\r\n\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment12.params=
comment12.target=void\ deleteMax()
comment12.text=\r\n\ Removes\ the\ largest\ key\ and\ associated\ value\ from\ this\ symbol\ table.\r\n\r\n\ @throws\ NoSuchElementException\ if\ the\ symbol\ table\ is\ empty\r\n
comment13.params=
comment13.target=java.lang.Comparable\ min()
comment13.text=\r\n\ Returns\ the\ smallest\ key\ in\ this\ symbol\ table.\r\n\r\n\ @return\ the\ smallest\ key\ in\ this\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ this\ symbol\ table\ is\ empty\r\n
comment14.params=
comment14.target=java.lang.Comparable\ max()
comment14.text=\r\n\ Returns\ the\ largest\ key\ in\ this\ symbol\ table.\r\n\r\n\ @return\ the\ largest\ key\ in\ this\ symbol\ table\r\n\ @throws\ NoSuchElementException\ if\ this\ symbol\ table\ is\ empty\r\n
comment15.params=k
comment15.target=java.lang.Comparable\ select(int)
comment15.text=\r\n\ Return\ the\ kth\ smallest\ key\ in\ this\ symbol\ table.\r\n\r\n\ @param\ \ k\ the\ order\ statistic\r\n\ @return\ the\ {@code\ k}th\ smallest\ key\ in\ this\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ k}\ is\ between\ 0\ and\r\n\ \ \ \ \ \ \ \ <em>n</em>1\r\n
comment16.params=key
comment16.target=java.lang.Comparable\ floor(java.lang.Comparable)
comment16.text=\r\n\ Returns\ the\ largest\ key\ in\ this\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ largest\ key\ in\ this\ symbol\ table\ less\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment17.params=key
comment17.target=java.lang.Comparable\ ceiling(java.lang.Comparable)
comment17.text=\r\n\ Returns\ the\ smallest\ key\ in\ this\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ smallest\ key\ in\ this\ symbol\ table\ greater\ than\ or\ equal\ to\ {@code\ key}\r\n\ @throws\ NoSuchElementException\ if\ there\ is\ no\ such\ key\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment18.params=lo\ hi
comment18.target=int\ size(java.lang.Comparable,\ java.lang.Comparable)
comment18.text=\r\n\ Returns\ the\ number\ of\ keys\ in\ this\ symbol\ table\ in\ the\ specified\ range.\r\n\r\n\ @param\ lo\ minimum\ endpoint\r\n\ @param\ hi\ maximum\ endpoint\r\n\ @return\ the\ number\ of\ keys\ in\ this\ symbol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\r\n
comment19.params=
comment19.target=java.lang.Iterable\ keys()
comment19.text=\r\n\ Returns\ all\ keys\ in\ this\ symbol\ table\ as\ an\ {@code\ Iterable}.\r\n\ To\ iterate\ over\ all\ of\ the\ keys\ in\ the\ symbol\ table\ named\ {@code\ st},\r\n\ use\ the\ foreach\ notation\:\ {@code\ for\ (Key\ key\ \:\ st.keys())}.\r\n\r\n\ @return\ all\ keys\ in\ this\ symbol\ table\r\n
comment2.params=capacity
comment2.target=BinarySearchST(int)
comment2.text=\r\n\ Initializes\ an\ empty\ symbol\ table\ with\ the\ specified\ initial\ capacity.\r\n\ @param\ capacity\ the\ maximum\ capacity\r\n
comment20.params=lo\ hi
comment20.target=java.lang.Iterable\ keys(java.lang.Comparable,\ java.lang.Comparable)
comment20.text=\r\n\ Returns\ all\ keys\ in\ this\ symbol\ table\ in\ the\ given\ range,\r\n\ as\ an\ {@code\ Iterable}.\r\n\r\n\ @param\ lo\ minimum\ endpoint\r\n\ @param\ hi\ maximum\ endpoint\r\n\ @return\ all\ keys\ in\ this\ symbol\ table\ between\ {@code\ lo}\ \r\n\ \ \ \ \ \ \ \ \ (inclusive)\ and\ {@code\ hi}\ (inclusive)\r\n\ @throws\ IllegalArgumentException\ if\ either\ {@code\ lo}\ or\ {@code\ hi}\r\n\ \ \ \ \ \ \ \ \ is\ {@code\ null}\r\n
comment21.params=
comment21.target=boolean\ check()
comment21.text=\r\n\ \ Check\ internal\ invariants.\r\n
comment22.params=
comment22.target=boolean\ isSorted()
comment23.params=
comment23.target=boolean\ rankCheck()
comment24.params=args
comment24.target=void\ main(java.lang.String[])
comment24.text=\r\n\ Unit\ tests\ the\ {@code\ BinarySearchST}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=capacity
comment3.target=void\ resize(int)
comment4.params=
comment4.target=int\ size()
comment4.text=\r\n\ Returns\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table.\r\n\r\n\ @return\ the\ number\ of\ key-value\ pairs\ in\ this\ symbol\ table\r\n
comment5.params=
comment5.target=boolean\ isEmpty()
comment5.text=\r\n\ Returns\ true\ if\ this\ symbol\ table\ is\ empty.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ is\ empty;\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n
comment6.params=key
comment6.target=boolean\ contains(java.lang.Comparable)
comment6.text=\r\n\ Does\ this\ symbol\ table\ contain\ the\ given\ key?\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ {@code\ true}\ if\ this\ symbol\ table\ contains\ {@code\ key}\ and\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment7.params=key
comment7.target=java.lang.Object\ get(java.lang.Comparable)
comment7.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ given\ key\ in\ this\ symbol\ table.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ value\ associated\ with\ the\ given\ key\ if\ the\ key\ is\ in\ the\ symbol\ table\r\n\ \ \ \ \ \ \ \ \ and\ {@code\ null}\ if\ the\ key\ is\ not\ in\ the\ symbol\ table\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment8.params=key
comment8.target=int\ rank(java.lang.Comparable)
comment8.text=\r\n\ Returns\ the\ number\ of\ keys\ in\ this\ symbol\ table\ strictly\ less\ than\ {@code\ key}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @return\ the\ number\ of\ keys\ in\ the\ symbol\ table\ strictly\ less\ than\ {@code\ key}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
comment9.params=key\ val
comment9.target=void\ put(java.lang.Comparable,\ java.lang.Object)
comment9.text=\r\n\ Inserts\ the\ specified\ key-value\ pair\ into\ the\ symbol\ table,\ overwriting\ the\ old\ \r\n\ value\ with\ the\ new\ value\ if\ the\ symbol\ table\ already\ contains\ the\ specified\ key.\r\n\ Deletes\ the\ specified\ key\ (and\ its\ associated\ value)\ from\ this\ symbol\ table\r\n\ if\ the\ specified\ value\ is\ {@code\ null}.\r\n\r\n\ @param\ \ key\ the\ key\r\n\ @param\ \ val\ the\ value\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ key}\ is\ {@code\ null}\r\n
numComments=25
