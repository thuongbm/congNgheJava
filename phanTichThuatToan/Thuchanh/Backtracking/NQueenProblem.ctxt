#BlueJ class context
comment0.target=NQueenProblem
comment0.text=\ Java\ program\ to\ solve\ N\ Queen\ Problem\ using\ \r\nbacktracking
comment1.params=board
comment1.target=void\ printSolution(int[][])
comment1.text=A\ utility\ function\ to\ print\ solution
comment2.params=board\ row\ col
comment2.target=boolean\ isSafe(int[][],\ int,\ int)
comment2.text=\ A\ utility\ function\ to\ check\ if\ a\ queen\ can\ \r\n\ \ \ \ \ \ \ be\ placed\ on\ board[row][col].\ Note\ that\ this\ \r\n\ \ \ \ \ \ \ function\ is\ called\ when\ "col"\ queens\ are\ already\ \r\n\ \ \ \ \ \ \ placeed\ in\ columns\ from\ 0\ to\ col\ -1.\ So\ we\ need\ \r\nto\ check\ only\ left\ side\ for\ attacking\ queens
comment3.params=board\ col
comment3.target=boolean\ solveNQUtil(int[][],\ int)
comment3.text=\ A\ recursive\ utility\ function\ to\ solve\ N\ \r\nQueen\ problem
comment4.params=
comment4.target=boolean\ solveNQ()
comment4.text=\ This\ function\ solves\ the\ N\ Queen\ problem\ using\ \r\n\ \ \ \ \ \ \ Backtracking.\ \ It\ mainly\ uses\ solveNQUtil\ ()\ to\ \r\n\ \ \ \ \ \ \ solve\ the\ problem.\ It\ returns\ false\ if\ queens\ \r\n\ \ \ \ \ \ \ cannot\ be\ placed,\ otherwise,\ return\ true\ and\ \r\n\ \ \ \ \ \ \ prints\ placement\ of\ queens\ in\ the\ form\ of\ 1s.\ \r\n\ \ \ \ \ \ \ Please\ note\ that\ there\ may\ be\ more\ than\ one\ \r\n\ \ \ \ \ \ \ solutions,\ this\ function\ prints\ one\ of\ the\ \r\nfeasible\ solutions.
comment5.params=args
comment5.target=void\ main(java.lang.String[])
numComments=6
